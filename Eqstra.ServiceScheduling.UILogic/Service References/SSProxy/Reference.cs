//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 12.0.21005.1
// 
namespace Eqstra.ServiceScheduling.UILogic.SSProxy {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CallContext", Namespace="http://schemas.microsoft.com/dynamics/2010/01/datacontracts")]
    public partial class CallContext : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CompanyField;
        
        private string LanguageField;
        
        private string LogonAsUserField;
        
        private string MessageIdField;
        
        private System.Collections.Generic.Dictionary<string, string> PropertyBagField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Language {
            get {
                return this.LanguageField;
            }
            set {
                if ((object.ReferenceEquals(this.LanguageField, value) != true)) {
                    this.LanguageField = value;
                    this.RaisePropertyChanged("Language");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LogonAsUser {
            get {
                return this.LogonAsUserField;
            }
            set {
                if ((object.ReferenceEquals(this.LogonAsUserField, value) != true)) {
                    this.LogonAsUserField = value;
                    this.RaisePropertyChanged("LogonAsUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageId {
            get {
                return this.MessageIdField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageIdField, value) != true)) {
                    this.MessageIdField = value;
                    this.RaisePropertyChanged("MessageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string> PropertyBag {
            get {
                return this.PropertyBagField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyBagField, value) != true)) {
                    this.PropertyBagField = value;
                    this.RaisePropertyChanged("PropertyBag");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MzkCountyContract", Namespace="http://schemas.datacontract.org/2004/07/Dynamics.Ax.Application")]
    public partial class MzkCountyContract : Eqstra.ServiceScheduling.UILogic.SSProxy.XppObjectBase {
        
        private string parmCountryRegionIdField;
        
        private string parmCountyIdField;
        
        private string parmStateIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmCountryRegionId {
            get {
                return this.parmCountryRegionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.parmCountryRegionIdField, value) != true)) {
                    this.parmCountryRegionIdField = value;
                    this.RaisePropertyChanged("parmCountryRegionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmCountyId {
            get {
                return this.parmCountyIdField;
            }
            set {
                if ((object.ReferenceEquals(this.parmCountyIdField, value) != true)) {
                    this.parmCountyIdField = value;
                    this.RaisePropertyChanged("parmCountyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmStateId {
            get {
                return this.parmStateIdField;
            }
            set {
                if ((object.ReferenceEquals(this.parmStateIdField, value) != true)) {
                    this.parmStateIdField = value;
                    this.RaisePropertyChanged("parmStateId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="XppObjectBase", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.Dynamics.Ax.Xpp")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkAccountContract))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkAddressContract))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkCityContract))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkCountryRegionContract))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkDriverContract))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkLocationTypeContract))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkProvinceContract))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceDetailsContract))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchdTasksContract))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkValidateUserContract))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkVendorAccountContract))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkZipCodeContract))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkCountyContract))]
    public partial class XppObjectBase : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MzkAccountContract", Namespace="http://schemas.datacontract.org/2004/07/Dynamics.Ax.Application")]
    public partial class MzkAccountContract : Eqstra.ServiceScheduling.UILogic.SSProxy.XppObjectBase {
        
        private string parmAccountNumField;
        
        private string parmAddressField;
        
        private string parmCityNameField;
        
        private string parmCountryField;
        
        private string parmCountyField;
        
        private string parmNameField;
        
        private string parmPostboxField;
        
        private long parmRecIDField;
        
        private string parmRegionField;
        
        private string parmStateField;
        
        private string parmZipcodeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmAccountNum {
            get {
                return this.parmAccountNumField;
            }
            set {
                if ((object.ReferenceEquals(this.parmAccountNumField, value) != true)) {
                    this.parmAccountNumField = value;
                    this.RaisePropertyChanged("parmAccountNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmAddress {
            get {
                return this.parmAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.parmAddressField, value) != true)) {
                    this.parmAddressField = value;
                    this.RaisePropertyChanged("parmAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmCityName {
            get {
                return this.parmCityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.parmCityNameField, value) != true)) {
                    this.parmCityNameField = value;
                    this.RaisePropertyChanged("parmCityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmCountry {
            get {
                return this.parmCountryField;
            }
            set {
                if ((object.ReferenceEquals(this.parmCountryField, value) != true)) {
                    this.parmCountryField = value;
                    this.RaisePropertyChanged("parmCountry");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmCounty {
            get {
                return this.parmCountyField;
            }
            set {
                if ((object.ReferenceEquals(this.parmCountyField, value) != true)) {
                    this.parmCountyField = value;
                    this.RaisePropertyChanged("parmCounty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmName {
            get {
                return this.parmNameField;
            }
            set {
                if ((object.ReferenceEquals(this.parmNameField, value) != true)) {
                    this.parmNameField = value;
                    this.RaisePropertyChanged("parmName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmPostbox {
            get {
                return this.parmPostboxField;
            }
            set {
                if ((object.ReferenceEquals(this.parmPostboxField, value) != true)) {
                    this.parmPostboxField = value;
                    this.RaisePropertyChanged("parmPostbox");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long parmRecID {
            get {
                return this.parmRecIDField;
            }
            set {
                if ((this.parmRecIDField.Equals(value) != true)) {
                    this.parmRecIDField = value;
                    this.RaisePropertyChanged("parmRecID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmRegion {
            get {
                return this.parmRegionField;
            }
            set {
                if ((object.ReferenceEquals(this.parmRegionField, value) != true)) {
                    this.parmRegionField = value;
                    this.RaisePropertyChanged("parmRegion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmState {
            get {
                return this.parmStateField;
            }
            set {
                if ((object.ReferenceEquals(this.parmStateField, value) != true)) {
                    this.parmStateField = value;
                    this.RaisePropertyChanged("parmState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmZipcode {
            get {
                return this.parmZipcodeField;
            }
            set {
                if ((object.ReferenceEquals(this.parmZipcodeField, value) != true)) {
                    this.parmZipcodeField = value;
                    this.RaisePropertyChanged("parmZipcode");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MzkAddressContract", Namespace="http://schemas.datacontract.org/2004/07/Dynamics.Ax.Application")]
    public partial class MzkAddressContract : Eqstra.ServiceScheduling.UILogic.SSProxy.XppObjectBase {
        
        private string parmCityField;
        
        private string parmCountryRegionIdField;
        
        private string parmProvinceField;
        
        private string parmStreetField;
        
        private string parmSubUrbField;
        
        private string parmZipCodeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmCity {
            get {
                return this.parmCityField;
            }
            set {
                if ((object.ReferenceEquals(this.parmCityField, value) != true)) {
                    this.parmCityField = value;
                    this.RaisePropertyChanged("parmCity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmCountryRegionId {
            get {
                return this.parmCountryRegionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.parmCountryRegionIdField, value) != true)) {
                    this.parmCountryRegionIdField = value;
                    this.RaisePropertyChanged("parmCountryRegionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmProvince {
            get {
                return this.parmProvinceField;
            }
            set {
                if ((object.ReferenceEquals(this.parmProvinceField, value) != true)) {
                    this.parmProvinceField = value;
                    this.RaisePropertyChanged("parmProvince");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmStreet {
            get {
                return this.parmStreetField;
            }
            set {
                if ((object.ReferenceEquals(this.parmStreetField, value) != true)) {
                    this.parmStreetField = value;
                    this.RaisePropertyChanged("parmStreet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmSubUrb {
            get {
                return this.parmSubUrbField;
            }
            set {
                if ((object.ReferenceEquals(this.parmSubUrbField, value) != true)) {
                    this.parmSubUrbField = value;
                    this.RaisePropertyChanged("parmSubUrb");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmZipCode {
            get {
                return this.parmZipCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.parmZipCodeField, value) != true)) {
                    this.parmZipCodeField = value;
                    this.RaisePropertyChanged("parmZipCode");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MzkCityContract", Namespace="http://schemas.datacontract.org/2004/07/Dynamics.Ax.Application")]
    public partial class MzkCityContract : Eqstra.ServiceScheduling.UILogic.SSProxy.XppObjectBase {
        
        private string parmCityField;
        
        private string parmCountryRegionIdField;
        
        private string parmStateIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmCity {
            get {
                return this.parmCityField;
            }
            set {
                if ((object.ReferenceEquals(this.parmCityField, value) != true)) {
                    this.parmCityField = value;
                    this.RaisePropertyChanged("parmCity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmCountryRegionId {
            get {
                return this.parmCountryRegionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.parmCountryRegionIdField, value) != true)) {
                    this.parmCountryRegionIdField = value;
                    this.RaisePropertyChanged("parmCountryRegionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmStateId {
            get {
                return this.parmStateIdField;
            }
            set {
                if ((object.ReferenceEquals(this.parmStateIdField, value) != true)) {
                    this.parmStateIdField = value;
                    this.RaisePropertyChanged("parmStateId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MzkCountryRegionContract", Namespace="http://schemas.datacontract.org/2004/07/Dynamics.Ax.Application")]
    public partial class MzkCountryRegionContract : Eqstra.ServiceScheduling.UILogic.SSProxy.XppObjectBase {
        
        private string parmCountryRegionIdField;
        
        private string parmCountryRegionNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmCountryRegionId {
            get {
                return this.parmCountryRegionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.parmCountryRegionIdField, value) != true)) {
                    this.parmCountryRegionIdField = value;
                    this.RaisePropertyChanged("parmCountryRegionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmCountryRegionName {
            get {
                return this.parmCountryRegionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.parmCountryRegionNameField, value) != true)) {
                    this.parmCountryRegionNameField = value;
                    this.RaisePropertyChanged("parmCountryRegionName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MzkDriverContract", Namespace="http://schemas.datacontract.org/2004/07/Dynamics.Ax.Application")]
    public partial class MzkDriverContract : Eqstra.ServiceScheduling.UILogic.SSProxy.XppObjectBase {
        
        private string parmAddressField;
        
        private string parmDriverIdField;
        
        private string parmNameField;
        
        private long parmRecIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmAddress {
            get {
                return this.parmAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.parmAddressField, value) != true)) {
                    this.parmAddressField = value;
                    this.RaisePropertyChanged("parmAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmDriverId {
            get {
                return this.parmDriverIdField;
            }
            set {
                if ((object.ReferenceEquals(this.parmDriverIdField, value) != true)) {
                    this.parmDriverIdField = value;
                    this.RaisePropertyChanged("parmDriverId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmName {
            get {
                return this.parmNameField;
            }
            set {
                if ((object.ReferenceEquals(this.parmNameField, value) != true)) {
                    this.parmNameField = value;
                    this.RaisePropertyChanged("parmName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long parmRecID {
            get {
                return this.parmRecIDField;
            }
            set {
                if ((this.parmRecIDField.Equals(value) != true)) {
                    this.parmRecIDField = value;
                    this.RaisePropertyChanged("parmRecID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MzkLocationTypeContract", Namespace="http://schemas.datacontract.org/2004/07/Dynamics.Ax.Application")]
    public partial class MzkLocationTypeContract : Eqstra.ServiceScheduling.UILogic.SSProxy.XppObjectBase {
        
        private string parmLocationNameField;
        
        private Eqstra.ServiceScheduling.UILogic.SSProxy.EXDCaseServiceDestinationType parmLocationTypeField;
        
        private long parmRecIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmLocationName {
            get {
                return this.parmLocationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.parmLocationNameField, value) != true)) {
                    this.parmLocationNameField = value;
                    this.RaisePropertyChanged("parmLocationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Eqstra.ServiceScheduling.UILogic.SSProxy.EXDCaseServiceDestinationType parmLocationType {
            get {
                return this.parmLocationTypeField;
            }
            set {
                if ((this.parmLocationTypeField.Equals(value) != true)) {
                    this.parmLocationTypeField = value;
                    this.RaisePropertyChanged("parmLocationType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long parmRecID {
            get {
                return this.parmRecIDField;
            }
            set {
                if ((this.parmRecIDField.Equals(value) != true)) {
                    this.parmRecIDField = value;
                    this.RaisePropertyChanged("parmRecID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MzkProvinceContract", Namespace="http://schemas.datacontract.org/2004/07/Dynamics.Ax.Application")]
    public partial class MzkProvinceContract : Eqstra.ServiceScheduling.UILogic.SSProxy.XppObjectBase {
        
        private string parmStateIdField;
        
        private string parmStateNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmStateId {
            get {
                return this.parmStateIdField;
            }
            set {
                if ((object.ReferenceEquals(this.parmStateIdField, value) != true)) {
                    this.parmStateIdField = value;
                    this.RaisePropertyChanged("parmStateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmStateName {
            get {
                return this.parmStateNameField;
            }
            set {
                if ((object.ReferenceEquals(this.parmStateNameField, value) != true)) {
                    this.parmStateNameField = value;
                    this.RaisePropertyChanged("parmStateName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MzkServiceDetailsContract", Namespace="http://schemas.datacontract.org/2004/07/Dynamics.Ax.Application")]
    public partial class MzkServiceDetailsContract : Eqstra.ServiceScheduling.UILogic.SSProxy.XppObjectBase {
        
        private string parmAdditionalWorkField;
        
        private string parmAddressField;
        
        private string parmContactPersonNameField;
        
        private string parmContactPersonPhoneField;
        
        private string parmEventDescField;
        
        private long parmLiftLocationRecIdField;
        
        private string parmLocationTypeField;
        
        private string parmODOReadingField;
        
        private System.DateTime parmODOReadingDateField;
        
        private System.DateTime parmPreferredDateFirstOptionField;
        
        private System.DateTime parmPreferredDateSecondOptionField;
        
        private string parmServiceTypeField;
        
        private string parmSupplierNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmAdditionalWork {
            get {
                return this.parmAdditionalWorkField;
            }
            set {
                if ((object.ReferenceEquals(this.parmAdditionalWorkField, value) != true)) {
                    this.parmAdditionalWorkField = value;
                    this.RaisePropertyChanged("parmAdditionalWork");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmAddress {
            get {
                return this.parmAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.parmAddressField, value) != true)) {
                    this.parmAddressField = value;
                    this.RaisePropertyChanged("parmAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmContactPersonName {
            get {
                return this.parmContactPersonNameField;
            }
            set {
                if ((object.ReferenceEquals(this.parmContactPersonNameField, value) != true)) {
                    this.parmContactPersonNameField = value;
                    this.RaisePropertyChanged("parmContactPersonName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmContactPersonPhone {
            get {
                return this.parmContactPersonPhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.parmContactPersonPhoneField, value) != true)) {
                    this.parmContactPersonPhoneField = value;
                    this.RaisePropertyChanged("parmContactPersonPhone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmEventDesc {
            get {
                return this.parmEventDescField;
            }
            set {
                if ((object.ReferenceEquals(this.parmEventDescField, value) != true)) {
                    this.parmEventDescField = value;
                    this.RaisePropertyChanged("parmEventDesc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long parmLiftLocationRecId {
            get {
                return this.parmLiftLocationRecIdField;
            }
            set {
                if ((this.parmLiftLocationRecIdField.Equals(value) != true)) {
                    this.parmLiftLocationRecIdField = value;
                    this.RaisePropertyChanged("parmLiftLocationRecId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmLocationType {
            get {
                return this.parmLocationTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.parmLocationTypeField, value) != true)) {
                    this.parmLocationTypeField = value;
                    this.RaisePropertyChanged("parmLocationType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmODOReading {
            get {
                return this.parmODOReadingField;
            }
            set {
                if ((object.ReferenceEquals(this.parmODOReadingField, value) != true)) {
                    this.parmODOReadingField = value;
                    this.RaisePropertyChanged("parmODOReading");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime parmODOReadingDate {
            get {
                return this.parmODOReadingDateField;
            }
            set {
                if ((this.parmODOReadingDateField.Equals(value) != true)) {
                    this.parmODOReadingDateField = value;
                    this.RaisePropertyChanged("parmODOReadingDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime parmPreferredDateFirstOption {
            get {
                return this.parmPreferredDateFirstOptionField;
            }
            set {
                if ((this.parmPreferredDateFirstOptionField.Equals(value) != true)) {
                    this.parmPreferredDateFirstOptionField = value;
                    this.RaisePropertyChanged("parmPreferredDateFirstOption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime parmPreferredDateSecondOption {
            get {
                return this.parmPreferredDateSecondOptionField;
            }
            set {
                if ((this.parmPreferredDateSecondOptionField.Equals(value) != true)) {
                    this.parmPreferredDateSecondOptionField = value;
                    this.RaisePropertyChanged("parmPreferredDateSecondOption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmServiceType {
            get {
                return this.parmServiceTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.parmServiceTypeField, value) != true)) {
                    this.parmServiceTypeField = value;
                    this.RaisePropertyChanged("parmServiceType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmSupplierName {
            get {
                return this.parmSupplierNameField;
            }
            set {
                if ((object.ReferenceEquals(this.parmSupplierNameField, value) != true)) {
                    this.parmSupplierNameField = value;
                    this.RaisePropertyChanged("parmSupplierName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MzkServiceSchdTasksContract", Namespace="http://schemas.datacontract.org/2004/07/Dynamics.Ax.Application")]
    public partial class MzkServiceSchdTasksContract : Eqstra.ServiceScheduling.UILogic.SSProxy.XppObjectBase {
        
        private string parmCaseCategoryField;
        
        private string parmCaseIDField;
        
        private long parmCaseRecIDField;
        
        private long parmCaseServiceRecIDField;
        
        private string parmCustAddressField;
        
        private string parmCustNameField;
        
        private string parmCustPhoneField;
        
        private string parmDriverFirstNameField;
        
        private string parmDriverLastNameField;
        
        private string parmDriverPhoneField;
        
        private Eqstra.ServiceScheduling.UILogic.SSProxy.EEPActionStep parmEEPActionStepField;
        
        private string parmEmailField;
        
        private string parmMakeField;
        
        private string parmModelField;
        
        private string parmRegistrationNumField;
        
        private long parmServiceRecIDField;
        
        private string parmStatusField;
        
        private System.DateTime parmStatusDueDateField;
        
        private string parmUserIDField;
        
        private string parmVehicleDescriptionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmCaseCategory {
            get {
                return this.parmCaseCategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.parmCaseCategoryField, value) != true)) {
                    this.parmCaseCategoryField = value;
                    this.RaisePropertyChanged("parmCaseCategory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmCaseID {
            get {
                return this.parmCaseIDField;
            }
            set {
                if ((object.ReferenceEquals(this.parmCaseIDField, value) != true)) {
                    this.parmCaseIDField = value;
                    this.RaisePropertyChanged("parmCaseID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long parmCaseRecID {
            get {
                return this.parmCaseRecIDField;
            }
            set {
                if ((this.parmCaseRecIDField.Equals(value) != true)) {
                    this.parmCaseRecIDField = value;
                    this.RaisePropertyChanged("parmCaseRecID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long parmCaseServiceRecID {
            get {
                return this.parmCaseServiceRecIDField;
            }
            set {
                if ((this.parmCaseServiceRecIDField.Equals(value) != true)) {
                    this.parmCaseServiceRecIDField = value;
                    this.RaisePropertyChanged("parmCaseServiceRecID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmCustAddress {
            get {
                return this.parmCustAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.parmCustAddressField, value) != true)) {
                    this.parmCustAddressField = value;
                    this.RaisePropertyChanged("parmCustAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmCustName {
            get {
                return this.parmCustNameField;
            }
            set {
                if ((object.ReferenceEquals(this.parmCustNameField, value) != true)) {
                    this.parmCustNameField = value;
                    this.RaisePropertyChanged("parmCustName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmCustPhone {
            get {
                return this.parmCustPhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.parmCustPhoneField, value) != true)) {
                    this.parmCustPhoneField = value;
                    this.RaisePropertyChanged("parmCustPhone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmDriverFirstName {
            get {
                return this.parmDriverFirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.parmDriverFirstNameField, value) != true)) {
                    this.parmDriverFirstNameField = value;
                    this.RaisePropertyChanged("parmDriverFirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmDriverLastName {
            get {
                return this.parmDriverLastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.parmDriverLastNameField, value) != true)) {
                    this.parmDriverLastNameField = value;
                    this.RaisePropertyChanged("parmDriverLastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmDriverPhone {
            get {
                return this.parmDriverPhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.parmDriverPhoneField, value) != true)) {
                    this.parmDriverPhoneField = value;
                    this.RaisePropertyChanged("parmDriverPhone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Eqstra.ServiceScheduling.UILogic.SSProxy.EEPActionStep parmEEPActionStep {
            get {
                return this.parmEEPActionStepField;
            }
            set {
                if ((this.parmEEPActionStepField.Equals(value) != true)) {
                    this.parmEEPActionStepField = value;
                    this.RaisePropertyChanged("parmEEPActionStep");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmEmail {
            get {
                return this.parmEmailField;
            }
            set {
                if ((object.ReferenceEquals(this.parmEmailField, value) != true)) {
                    this.parmEmailField = value;
                    this.RaisePropertyChanged("parmEmail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmMake {
            get {
                return this.parmMakeField;
            }
            set {
                if ((object.ReferenceEquals(this.parmMakeField, value) != true)) {
                    this.parmMakeField = value;
                    this.RaisePropertyChanged("parmMake");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmModel {
            get {
                return this.parmModelField;
            }
            set {
                if ((object.ReferenceEquals(this.parmModelField, value) != true)) {
                    this.parmModelField = value;
                    this.RaisePropertyChanged("parmModel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmRegistrationNum {
            get {
                return this.parmRegistrationNumField;
            }
            set {
                if ((object.ReferenceEquals(this.parmRegistrationNumField, value) != true)) {
                    this.parmRegistrationNumField = value;
                    this.RaisePropertyChanged("parmRegistrationNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long parmServiceRecID {
            get {
                return this.parmServiceRecIDField;
            }
            set {
                if ((this.parmServiceRecIDField.Equals(value) != true)) {
                    this.parmServiceRecIDField = value;
                    this.RaisePropertyChanged("parmServiceRecID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmStatus {
            get {
                return this.parmStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.parmStatusField, value) != true)) {
                    this.parmStatusField = value;
                    this.RaisePropertyChanged("parmStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime parmStatusDueDate {
            get {
                return this.parmStatusDueDateField;
            }
            set {
                if ((this.parmStatusDueDateField.Equals(value) != true)) {
                    this.parmStatusDueDateField = value;
                    this.RaisePropertyChanged("parmStatusDueDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmUserID {
            get {
                return this.parmUserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.parmUserIDField, value) != true)) {
                    this.parmUserIDField = value;
                    this.RaisePropertyChanged("parmUserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmVehicleDescription {
            get {
                return this.parmVehicleDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.parmVehicleDescriptionField, value) != true)) {
                    this.parmVehicleDescriptionField = value;
                    this.RaisePropertyChanged("parmVehicleDescription");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MzkValidateUserContract", Namespace="http://schemas.datacontract.org/2004/07/Dynamics.Ax.Application")]
    public partial class MzkValidateUserContract : Eqstra.ServiceScheduling.UILogic.SSProxy.XppObjectBase {
        
        private string parmCompanyField;
        
        private string parmCompanyNameField;
        
        private string parmUserIDField;
        
        private string parmUserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmCompany {
            get {
                return this.parmCompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.parmCompanyField, value) != true)) {
                    this.parmCompanyField = value;
                    this.RaisePropertyChanged("parmCompany");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmCompanyName {
            get {
                return this.parmCompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.parmCompanyNameField, value) != true)) {
                    this.parmCompanyNameField = value;
                    this.RaisePropertyChanged("parmCompanyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmUserID {
            get {
                return this.parmUserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.parmUserIDField, value) != true)) {
                    this.parmUserIDField = value;
                    this.RaisePropertyChanged("parmUserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmUserName {
            get {
                return this.parmUserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.parmUserNameField, value) != true)) {
                    this.parmUserNameField = value;
                    this.RaisePropertyChanged("parmUserName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MzkVendorAccountContract", Namespace="http://schemas.datacontract.org/2004/07/Dynamics.Ax.Application")]
    public partial class MzkVendorAccountContract : Eqstra.ServiceScheduling.UILogic.SSProxy.XppObjectBase {
        
        private string parmAccountNumField;
        
        private string parmAddressField;
        
        private string parmCityNameField;
        
        private string parmContactPersonNameField;
        
        private string parmContactPersonPhoneField;
        
        private string parmCountryField;
        
        private string parmNameField;
        
        private string parmPostboxField;
        
        private string parmRegionField;
        
        private string parmStateField;
        
        private string parmSuburbanField;
        
        private string parmZipcodeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmAccountNum {
            get {
                return this.parmAccountNumField;
            }
            set {
                if ((object.ReferenceEquals(this.parmAccountNumField, value) != true)) {
                    this.parmAccountNumField = value;
                    this.RaisePropertyChanged("parmAccountNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmAddress {
            get {
                return this.parmAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.parmAddressField, value) != true)) {
                    this.parmAddressField = value;
                    this.RaisePropertyChanged("parmAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmCityName {
            get {
                return this.parmCityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.parmCityNameField, value) != true)) {
                    this.parmCityNameField = value;
                    this.RaisePropertyChanged("parmCityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmContactPersonName {
            get {
                return this.parmContactPersonNameField;
            }
            set {
                if ((object.ReferenceEquals(this.parmContactPersonNameField, value) != true)) {
                    this.parmContactPersonNameField = value;
                    this.RaisePropertyChanged("parmContactPersonName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmContactPersonPhone {
            get {
                return this.parmContactPersonPhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.parmContactPersonPhoneField, value) != true)) {
                    this.parmContactPersonPhoneField = value;
                    this.RaisePropertyChanged("parmContactPersonPhone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmCountry {
            get {
                return this.parmCountryField;
            }
            set {
                if ((object.ReferenceEquals(this.parmCountryField, value) != true)) {
                    this.parmCountryField = value;
                    this.RaisePropertyChanged("parmCountry");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmName {
            get {
                return this.parmNameField;
            }
            set {
                if ((object.ReferenceEquals(this.parmNameField, value) != true)) {
                    this.parmNameField = value;
                    this.RaisePropertyChanged("parmName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmPostbox {
            get {
                return this.parmPostboxField;
            }
            set {
                if ((object.ReferenceEquals(this.parmPostboxField, value) != true)) {
                    this.parmPostboxField = value;
                    this.RaisePropertyChanged("parmPostbox");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmRegion {
            get {
                return this.parmRegionField;
            }
            set {
                if ((object.ReferenceEquals(this.parmRegionField, value) != true)) {
                    this.parmRegionField = value;
                    this.RaisePropertyChanged("parmRegion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmState {
            get {
                return this.parmStateField;
            }
            set {
                if ((object.ReferenceEquals(this.parmStateField, value) != true)) {
                    this.parmStateField = value;
                    this.RaisePropertyChanged("parmState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmSuburban {
            get {
                return this.parmSuburbanField;
            }
            set {
                if ((object.ReferenceEquals(this.parmSuburbanField, value) != true)) {
                    this.parmSuburbanField = value;
                    this.RaisePropertyChanged("parmSuburban");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmZipcode {
            get {
                return this.parmZipcodeField;
            }
            set {
                if ((object.ReferenceEquals(this.parmZipcodeField, value) != true)) {
                    this.parmZipcodeField = value;
                    this.RaisePropertyChanged("parmZipcode");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MzkZipCodeContract", Namespace="http://schemas.datacontract.org/2004/07/Dynamics.Ax.Application")]
    public partial class MzkZipCodeContract : Eqstra.ServiceScheduling.UILogic.SSProxy.XppObjectBase {
        
        private Eqstra.ServiceScheduling.UILogic.SSProxy.EXDAddressType parmAddressTypeField;
        
        private string parmCityField;
        
        private string parmCountryRegionIdField;
        
        private string parmRegionField;
        
        private string parmStateIdField;
        
        private string parmSuburbField;
        
        private string parmZipCodeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Eqstra.ServiceScheduling.UILogic.SSProxy.EXDAddressType parmAddressType {
            get {
                return this.parmAddressTypeField;
            }
            set {
                if ((this.parmAddressTypeField.Equals(value) != true)) {
                    this.parmAddressTypeField = value;
                    this.RaisePropertyChanged("parmAddressType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmCity {
            get {
                return this.parmCityField;
            }
            set {
                if ((object.ReferenceEquals(this.parmCityField, value) != true)) {
                    this.parmCityField = value;
                    this.RaisePropertyChanged("parmCity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmCountryRegionId {
            get {
                return this.parmCountryRegionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.parmCountryRegionIdField, value) != true)) {
                    this.parmCountryRegionIdField = value;
                    this.RaisePropertyChanged("parmCountryRegionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmRegion {
            get {
                return this.parmRegionField;
            }
            set {
                if ((object.ReferenceEquals(this.parmRegionField, value) != true)) {
                    this.parmRegionField = value;
                    this.RaisePropertyChanged("parmRegion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmStateId {
            get {
                return this.parmStateIdField;
            }
            set {
                if ((object.ReferenceEquals(this.parmStateIdField, value) != true)) {
                    this.parmStateIdField = value;
                    this.RaisePropertyChanged("parmStateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmSuburb {
            get {
                return this.parmSuburbField;
            }
            set {
                if ((object.ReferenceEquals(this.parmSuburbField, value) != true)) {
                    this.parmSuburbField = value;
                    this.RaisePropertyChanged("parmSuburb");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parmZipCode {
            get {
                return this.parmZipCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.parmZipCodeField, value) != true)) {
                    this.parmZipCodeField = value;
                    this.RaisePropertyChanged("parmZipCode");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EXDCaseServiceDestinationType", Namespace="http://schemas.datacontract.org/2004/07/Dynamics.Ax.Application")]
    public enum EXDCaseServiceDestinationType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Vendor = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Customer = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Driver = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Other = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CustomerSpecific = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EEPActionStep", Namespace="http://schemas.datacontract.org/2004/07/Dynamics.Ax.Application")]
    public enum EEPActionStep : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ProcessNone = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ProcessCBL = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ProcessLicenseReg = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GenQuery = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ServiceSchedulling = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ProcessEPStep1 = 97,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ProcessEPStep2 = 98,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ProcessEPStep3 = 99,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        JobCardDetails = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WorkComplete = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MaintenceServiceSheduling = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SelectSupplier = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConfirmDriver = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CTermQuoteStep1 = 100,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CTermQuoteStep2 = 101,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CTermQuoteStep3 = 102,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DupFuelCard = 103,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DupFuelCardAddress = 104,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Procurment = 105,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Procurment_AccRej = 106,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AwaitInspectionDetail = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AwaitInspectionConfirmation = 107,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AwaitInspectionDataCapture = 108,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AwaitInspectionAcceptance = 109,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AwaitDamageConfirmation = 110,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AwaitServiceDetail = 111,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AwaitSupplierSelection = 112,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AwaitServiceConfirmation = 113,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AwaitJobCardCapture = 114,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AwaitCollectionDetail = 115,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AwaitVendorSelection = 116,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AwaitCollectionConfirmation = 117,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AwaitCollectionDataCapture = 118,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ProvideCollectionDetails = 119,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SelectThirdPartyCollection = 120,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConfirmVehicleCollection = 121,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CaptureInspectionData = 122,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CustomerApprovals = 123,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UploadDrives = 124,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CreateDrivers = 125,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EXDAddressType", Namespace="http://schemas.datacontract.org/2004/07/Dynamics.Ax.Application")]
    public enum EXDAddressType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Physical = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Postal = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AifFault", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
    public partial class AifFault : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CustomDetailXmlField;
        
        private System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.FaultMessageList> FaultMessageListArrayField;
        
        private System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.InfologMessage> InfologMessageListField;
        
        private string StackTraceField;
        
        private int XppExceptionTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomDetailXml {
            get {
                return this.CustomDetailXmlField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomDetailXmlField, value) != true)) {
                    this.CustomDetailXmlField = value;
                    this.RaisePropertyChanged("CustomDetailXml");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.FaultMessageList> FaultMessageListArray {
            get {
                return this.FaultMessageListArrayField;
            }
            set {
                if ((object.ReferenceEquals(this.FaultMessageListArrayField, value) != true)) {
                    this.FaultMessageListArrayField = value;
                    this.RaisePropertyChanged("FaultMessageListArray");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.InfologMessage> InfologMessageList {
            get {
                return this.InfologMessageListField;
            }
            set {
                if ((object.ReferenceEquals(this.InfologMessageListField, value) != true)) {
                    this.InfologMessageListField = value;
                    this.RaisePropertyChanged("InfologMessageList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StackTrace {
            get {
                return this.StackTraceField;
            }
            set {
                if ((object.ReferenceEquals(this.StackTraceField, value) != true)) {
                    this.StackTraceField = value;
                    this.RaisePropertyChanged("StackTrace");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int XppExceptionType {
            get {
                return this.XppExceptionTypeField;
            }
            set {
                if ((this.XppExceptionTypeField.Equals(value) != true)) {
                    this.XppExceptionTypeField = value;
                    this.RaisePropertyChanged("XppExceptionType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FaultMessageList", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
    public partial class FaultMessageList : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DocumentField;
        
        private string DocumentOperationField;
        
        private System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.FaultMessage> FaultMessageArrayField;
        
        private string FieldField;
        
        private string ServiceField;
        
        private string ServiceOperationField;
        
        private string ServiceOperationParameterField;
        
        private string XPathField;
        
        private string XmlLineField;
        
        private string XmlPositionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Document {
            get {
                return this.DocumentField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentField, value) != true)) {
                    this.DocumentField = value;
                    this.RaisePropertyChanged("Document");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentOperation {
            get {
                return this.DocumentOperationField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentOperationField, value) != true)) {
                    this.DocumentOperationField = value;
                    this.RaisePropertyChanged("DocumentOperation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.FaultMessage> FaultMessageArray {
            get {
                return this.FaultMessageArrayField;
            }
            set {
                if ((object.ReferenceEquals(this.FaultMessageArrayField, value) != true)) {
                    this.FaultMessageArrayField = value;
                    this.RaisePropertyChanged("FaultMessageArray");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Field {
            get {
                return this.FieldField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldField, value) != true)) {
                    this.FieldField = value;
                    this.RaisePropertyChanged("Field");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Service {
            get {
                return this.ServiceField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceField, value) != true)) {
                    this.ServiceField = value;
                    this.RaisePropertyChanged("Service");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceOperation {
            get {
                return this.ServiceOperationField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceOperationField, value) != true)) {
                    this.ServiceOperationField = value;
                    this.RaisePropertyChanged("ServiceOperation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceOperationParameter {
            get {
                return this.ServiceOperationParameterField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceOperationParameterField, value) != true)) {
                    this.ServiceOperationParameterField = value;
                    this.RaisePropertyChanged("ServiceOperationParameter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string XPath {
            get {
                return this.XPathField;
            }
            set {
                if ((object.ReferenceEquals(this.XPathField, value) != true)) {
                    this.XPathField = value;
                    this.RaisePropertyChanged("XPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string XmlLine {
            get {
                return this.XmlLineField;
            }
            set {
                if ((object.ReferenceEquals(this.XmlLineField, value) != true)) {
                    this.XmlLineField = value;
                    this.RaisePropertyChanged("XmlLine");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string XmlPosition {
            get {
                return this.XmlPositionField;
            }
            set {
                if ((object.ReferenceEquals(this.XmlPositionField, value) != true)) {
                    this.XmlPositionField = value;
                    this.RaisePropertyChanged("XmlPosition");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InfologMessage", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.Dynamics.AX.Framework.Services")]
    public partial class InfologMessage : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Eqstra.ServiceScheduling.UILogic.SSProxy.InfologMessageType InfologMessageTypeField;
        
        private string MessageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Eqstra.ServiceScheduling.UILogic.SSProxy.InfologMessageType InfologMessageType {
            get {
                return this.InfologMessageTypeField;
            }
            set {
                if ((this.InfologMessageTypeField.Equals(value) != true)) {
                    this.InfologMessageTypeField = value;
                    this.RaisePropertyChanged("InfologMessageType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FaultMessage", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
    public partial class FaultMessage : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CodeField;
        
        private string MessageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InfologMessageType", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.Dynamics.AX.Framework.Services")]
    public enum InfologMessageType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Info = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warning = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://tempuri.org", ConfigurationName="SSProxy.MzkServiceSchedulingService")]
    public interface MzkServiceSchedulingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MzkServiceSchedulingService/getCityList", ReplyAction="http://tempuri.org/MzkServiceSchedulingService/getCityListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.AifFault), Action="http://tempuri.org/MzkServiceSchedulingService/getCityListAifFaultFault", Name="AifFault", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetCityListResponse> getCityListAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetCityListRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MzkServiceSchedulingService/getVendors", ReplyAction="http://tempuri.org/MzkServiceSchedulingService/getVendorsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.AifFault), Action="http://tempuri.org/MzkServiceSchedulingService/getVendorsAifFaultFault", Name="AifFault", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetVendorsResponse> getVendorsAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetVendorsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MzkServiceSchedulingService/getDrivers", ReplyAction="http://tempuri.org/MzkServiceSchedulingService/getDriversResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.AifFault), Action="http://tempuri.org/MzkServiceSchedulingService/getDriversAifFaultFault", Name="AifFault", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetDriversResponse> getDriversAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetDriversRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MzkServiceSchedulingService/getCustomers", ReplyAction="http://tempuri.org/MzkServiceSchedulingService/getCustomersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.AifFault), Action="http://tempuri.org/MzkServiceSchedulingService/getCustomersAifFaultFault", Name="AifFault", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetCustomersResponse> getCustomersAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetCustomersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MzkServiceSchedulingService/getDriverAddress", ReplyAction="http://tempuri.org/MzkServiceSchedulingService/getDriverAddressResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.AifFault), Action="http://tempuri.org/MzkServiceSchedulingService/getDriverAddressAifFaultFault", Name="AifFault", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetDriverAddressResponse> getDriverAddressAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetDriverAddressRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MzkServiceSchedulingService/getCustomerAddress", ReplyAction="http://tempuri.org/MzkServiceSchedulingService/getCustomerAddressResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.AifFault), Action="http://tempuri.org/MzkServiceSchedulingService/getCustomerAddressAifFaultFault", Name="AifFault", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetCustomerAddressResponse> getCustomerAddressAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetCustomerAddressRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MzkServiceSchedulingService/getTasksOptimize", ReplyAction="http://tempuri.org/MzkServiceSchedulingService/getTasksOptimizeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.AifFault), Action="http://tempuri.org/MzkServiceSchedulingService/getTasksOptimizeAifFaultFault", Name="AifFault", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetTasksOptimizeResponse> getTasksOptimizeAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetTasksOptimizeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MzkServiceSchedulingService/getTasks", ReplyAction="http://tempuri.org/MzkServiceSchedulingService/getTasksResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.AifFault), Action="http://tempuri.org/MzkServiceSchedulingService/getTasksAifFaultFault", Name="AifFault", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetTasksResponse> getTasksAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetTasksRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MzkServiceSchedulingService/getServiceTypes", ReplyAction="http://tempuri.org/MzkServiceSchedulingService/getServiceTypesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.AifFault), Action="http://tempuri.org/MzkServiceSchedulingService/getServiceTypesAifFaultFault", Name="AifFault", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetServiceTypesResponse> getServiceTypesAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetServiceTypesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MzkServiceSchedulingService/getSuburbList", ReplyAction="http://tempuri.org/MzkServiceSchedulingService/getSuburbListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.AifFault), Action="http://tempuri.org/MzkServiceSchedulingService/getSuburbListAifFaultFault", Name="AifFault", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetSuburbListResponse> getSuburbListAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetSuburbListRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MzkServiceSchedulingService/updateConfirmationDates", ReplyAction="http://tempuri.org/MzkServiceSchedulingService/updateConfirmationDatesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.AifFault), Action="http://tempuri.org/MzkServiceSchedulingService/updateConfirmationDatesAifFaultFau" +
            "lt", Name="AifFault", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceUpdateConfirmationDatesResponse> updateConfirmationDatesAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceUpdateConfirmationDatesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MzkServiceSchedulingService/updateStatusList", ReplyAction="http://tempuri.org/MzkServiceSchedulingService/updateStatusListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.AifFault), Action="http://tempuri.org/MzkServiceSchedulingService/updateStatusListAifFaultFault", Name="AifFault", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceUpdateStatusListResponse> updateStatusListAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceUpdateStatusListRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MzkServiceSchedulingService/validateUser", ReplyAction="http://tempuri.org/MzkServiceSchedulingService/validateUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.AifFault), Action="http://tempuri.org/MzkServiceSchedulingService/validateUserAifFaultFault", Name="AifFault", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceValidateUserResponse> validateUserAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceValidateUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MzkServiceSchedulingService/getZipcodeList", ReplyAction="http://tempuri.org/MzkServiceSchedulingService/getZipcodeListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.AifFault), Action="http://tempuri.org/MzkServiceSchedulingService/getZipcodeListAifFaultFault", Name="AifFault", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetZipcodeListResponse> getZipcodeListAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetZipcodeListRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MzkServiceSchedulingService/getODOReadingDetails", ReplyAction="http://tempuri.org/MzkServiceSchedulingService/getODOReadingDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.AifFault), Action="http://tempuri.org/MzkServiceSchedulingService/getODOReadingDetailsAifFaultFault", Name="AifFault", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetODOReadingDetailsResponse> getODOReadingDetailsAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetODOReadingDetailsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MzkServiceSchedulingService/getVendSupplirerName", ReplyAction="http://tempuri.org/MzkServiceSchedulingService/getVendSupplirerNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.AifFault), Action="http://tempuri.org/MzkServiceSchedulingService/getVendSupplirerNameAifFaultFault", Name="AifFault", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetVendSupplirerNameResponse> getVendSupplirerNameAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetVendSupplirerNameRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MzkServiceSchedulingService/getVendorAddress", ReplyAction="http://tempuri.org/MzkServiceSchedulingService/getVendorAddressResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.AifFault), Action="http://tempuri.org/MzkServiceSchedulingService/getVendorAddressAifFaultFault", Name="AifFault", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetVendorAddressResponse> getVendorAddressAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetVendorAddressRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MzkServiceSchedulingService/getTasks_Modified", ReplyAction="http://tempuri.org/MzkServiceSchedulingService/getTasks_ModifiedResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.AifFault), Action="http://tempuri.org/MzkServiceSchedulingService/getTasks_ModifiedAifFaultFault", Name="AifFault", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetTasks_ModifiedResponse> getTasks_ModifiedAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetTasks_ModifiedRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MzkServiceSchedulingService/getServiceDetails", ReplyAction="http://tempuri.org/MzkServiceSchedulingService/getServiceDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.AifFault), Action="http://tempuri.org/MzkServiceSchedulingService/getServiceDetailsAifFaultFault", Name="AifFault", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetServiceDetailsResponse> getServiceDetailsAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetServiceDetailsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MzkServiceSchedulingService/getLocationType", ReplyAction="http://tempuri.org/MzkServiceSchedulingService/getLocationTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.AifFault), Action="http://tempuri.org/MzkServiceSchedulingService/getLocationTypeAifFaultFault", Name="AifFault", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetLocationTypeResponse> getLocationTypeAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetLocationTypeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MzkServiceSchedulingService/getProvinceList", ReplyAction="http://tempuri.org/MzkServiceSchedulingService/getProvinceListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.AifFault), Action="http://tempuri.org/MzkServiceSchedulingService/getProvinceListAifFaultFault", Name="AifFault", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetProvinceListResponse> getProvinceListAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetProvinceListRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MzkServiceSchedulingService/insertServiceDetails", ReplyAction="http://tempuri.org/MzkServiceSchedulingService/insertServiceDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.AifFault), Action="http://tempuri.org/MzkServiceSchedulingService/insertServiceDetailsAifFaultFault", Name="AifFault", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceInsertServiceDetailsResponse> insertServiceDetailsAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceInsertServiceDetailsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MzkServiceSchedulingService/getCountryRegionList", ReplyAction="http://tempuri.org/MzkServiceSchedulingService/getCountryRegionListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.AifFault), Action="http://tempuri.org/MzkServiceSchedulingService/getCountryRegionListAifFaultFault", Name="AifFault", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetCountryRegionListResponse> getCountryRegionListAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetCountryRegionListRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MzkServiceSchedulingService/insertOtherAddress", ReplyAction="http://tempuri.org/MzkServiceSchedulingService/insertOtherAddressResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Eqstra.ServiceScheduling.UILogic.SSProxy.AifFault), Action="http://tempuri.org/MzkServiceSchedulingService/insertOtherAddressAifFaultFault", Name="AifFault", Namespace="http://schemas.microsoft.com/dynamics/2008/01/documents/Fault")]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceInsertOtherAddressResponse> insertOtherAddressAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceInsertOtherAddressRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetCityListRequest", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetCityListRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public string _CountryId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=1)]
        public string _StateId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=2)]
        public string _company;
        
        public MzkServiceSchedulingServiceGetCityListRequest() {
        }
        
        public MzkServiceSchedulingServiceGetCityListRequest(string _CountryId, string _StateId, string _company) {
            this._CountryId = _CountryId;
            this._StateId = _StateId;
            this._company = _company;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetCityListResponse", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetCityListResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkCountyContract> response;
        
        public MzkServiceSchedulingServiceGetCityListResponse() {
        }
        
        public MzkServiceSchedulingServiceGetCityListResponse(System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkCountyContract> response) {
            this.response = response;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetVendorsRequest", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetVendorsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public string _company;
        
        public MzkServiceSchedulingServiceGetVendorsRequest() {
        }
        
        public MzkServiceSchedulingServiceGetVendorsRequest(string _company) {
            this._company = _company;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetVendorsResponse", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetVendorsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkAccountContract> response;
        
        public MzkServiceSchedulingServiceGetVendorsResponse() {
        }
        
        public MzkServiceSchedulingServiceGetVendorsResponse(System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkAccountContract> response) {
            this.response = response;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetDriversRequest", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetDriversRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public string _company;
        
        public MzkServiceSchedulingServiceGetDriversRequest() {
        }
        
        public MzkServiceSchedulingServiceGetDriversRequest(string _company) {
            this._company = _company;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetDriversResponse", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetDriversResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkDriverContract> response;
        
        public MzkServiceSchedulingServiceGetDriversResponse() {
        }
        
        public MzkServiceSchedulingServiceGetDriversResponse(System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkDriverContract> response) {
            this.response = response;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetCustomersRequest", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetCustomersRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public string _company;
        
        public MzkServiceSchedulingServiceGetCustomersRequest() {
        }
        
        public MzkServiceSchedulingServiceGetCustomersRequest(string _company) {
            this._company = _company;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetCustomersResponse", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetCustomersResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkAccountContract> response;
        
        public MzkServiceSchedulingServiceGetCustomersResponse() {
        }
        
        public MzkServiceSchedulingServiceGetCustomersResponse(System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkAccountContract> response) {
            this.response = response;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetDriverAddressRequest", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetDriverAddressRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public long _driverTableRecId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=1)]
        public long _caseServiceRecId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=2)]
        public string _company;
        
        public MzkServiceSchedulingServiceGetDriverAddressRequest() {
        }
        
        public MzkServiceSchedulingServiceGetDriverAddressRequest(long _driverTableRecId, long _caseServiceRecId, string _company) {
            this._driverTableRecId = _driverTableRecId;
            this._caseServiceRecId = _caseServiceRecId;
            this._company = _company;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetDriverAddressResponse", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetDriverAddressResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public string response;
        
        public MzkServiceSchedulingServiceGetDriverAddressResponse() {
        }
        
        public MzkServiceSchedulingServiceGetDriverAddressResponse(string response) {
            this.response = response;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetCustomerAddressRequest", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetCustomerAddressRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public long _custTableRecId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=1)]
        public long _caseServiceRecId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=2)]
        public string _company;
        
        public MzkServiceSchedulingServiceGetCustomerAddressRequest() {
        }
        
        public MzkServiceSchedulingServiceGetCustomerAddressRequest(long _custTableRecId, long _caseServiceRecId, string _company) {
            this._custTableRecId = _custTableRecId;
            this._caseServiceRecId = _caseServiceRecId;
            this._company = _company;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetCustomerAddressResponse", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetCustomerAddressResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public string response;
        
        public MzkServiceSchedulingServiceGetCustomerAddressResponse() {
        }
        
        public MzkServiceSchedulingServiceGetCustomerAddressResponse(string response) {
            this.response = response;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetTasksOptimizeRequest", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetTasksOptimizeRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public string _userID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=1)]
        public string _company;
        
        public MzkServiceSchedulingServiceGetTasksOptimizeRequest() {
        }
        
        public MzkServiceSchedulingServiceGetTasksOptimizeRequest(string _userID, string _company) {
            this._userID = _userID;
            this._company = _company;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetTasksOptimizeResponse", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetTasksOptimizeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchdTasksContract> response;
        
        public MzkServiceSchedulingServiceGetTasksOptimizeResponse() {
        }
        
        public MzkServiceSchedulingServiceGetTasksOptimizeResponse(System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchdTasksContract> response) {
            this.response = response;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetTasksRequest", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetTasksRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public string _userID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=1)]
        public string _company;
        
        public MzkServiceSchedulingServiceGetTasksRequest() {
        }
        
        public MzkServiceSchedulingServiceGetTasksRequest(string _userID, string _company) {
            this._userID = _userID;
            this._company = _company;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetTasksResponse", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetTasksResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchdTasksContract> response;
        
        public MzkServiceSchedulingServiceGetTasksResponse() {
        }
        
        public MzkServiceSchedulingServiceGetTasksResponse(System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchdTasksContract> response) {
            this.response = response;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetServiceTypesRequest", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetServiceTypesRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public string _caseId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=1)]
        public string _company;
        
        public MzkServiceSchedulingServiceGetServiceTypesRequest() {
        }
        
        public MzkServiceSchedulingServiceGetServiceTypesRequest(string _caseId, string _company) {
            this._caseId = _caseId;
            this._company = _company;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetServiceTypesResponse", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetServiceTypesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public string response;
        
        public MzkServiceSchedulingServiceGetServiceTypesResponse() {
        }
        
        public MzkServiceSchedulingServiceGetServiceTypesResponse(string response) {
            this.response = response;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetSuburbListRequest", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetSuburbListRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public string _CountryId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=1)]
        public string _StateId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=2)]
        public string _company;
        
        public MzkServiceSchedulingServiceGetSuburbListRequest() {
        }
        
        public MzkServiceSchedulingServiceGetSuburbListRequest(string _CountryId, string _StateId, string _company) {
            this._CountryId = _CountryId;
            this._StateId = _StateId;
            this._company = _company;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetSuburbListResponse", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetSuburbListResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkCityContract> response;
        
        public MzkServiceSchedulingServiceGetSuburbListResponse() {
        }
        
        public MzkServiceSchedulingServiceGetSuburbListResponse(System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkCityContract> response) {
            this.response = response;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceUpdateConfirmationDatesRequest", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceUpdateConfirmationDatesRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public long _caseServiceRecId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=1)]
        public Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceDetailsContract contract;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=2)]
        public string _company;
        
        public MzkServiceSchedulingServiceUpdateConfirmationDatesRequest() {
        }
        
        public MzkServiceSchedulingServiceUpdateConfirmationDatesRequest(long _caseServiceRecId, Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceDetailsContract contract, string _company) {
            this._caseServiceRecId = _caseServiceRecId;
            this.contract = contract;
            this._company = _company;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceUpdateConfirmationDatesResponse", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceUpdateConfirmationDatesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public bool response;
        
        public MzkServiceSchedulingServiceUpdateConfirmationDatesResponse() {
        }
        
        public MzkServiceSchedulingServiceUpdateConfirmationDatesResponse(bool response) {
            this.response = response;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceUpdateStatusListRequest", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceUpdateStatusListRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchdTasksContract> _lstTasks;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=1)]
        public string _company;
        
        public MzkServiceSchedulingServiceUpdateStatusListRequest() {
        }
        
        public MzkServiceSchedulingServiceUpdateStatusListRequest(System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchdTasksContract> _lstTasks, string _company) {
            this._lstTasks = _lstTasks;
            this._company = _company;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceUpdateStatusListResponse", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceUpdateStatusListResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchdTasksContract> response;
        
        public MzkServiceSchedulingServiceUpdateStatusListResponse() {
        }
        
        public MzkServiceSchedulingServiceUpdateStatusListResponse(System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchdTasksContract> response) {
            this.response = response;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceValidateUserRequest", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceValidateUserRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public string _userID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=1)]
        public string _password;
        
        public MzkServiceSchedulingServiceValidateUserRequest() {
        }
        
        public MzkServiceSchedulingServiceValidateUserRequest(string _userID, string _password) {
            this._userID = _userID;
            this._password = _password;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceValidateUserResponse", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceValidateUserResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public Eqstra.ServiceScheduling.UILogic.SSProxy.MzkValidateUserContract response;
        
        public MzkServiceSchedulingServiceValidateUserResponse() {
        }
        
        public MzkServiceSchedulingServiceValidateUserResponse(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkValidateUserContract response) {
            this.response = response;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetZipcodeListRequest", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetZipcodeListRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public string _countryId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=1)]
        public string _StateId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=2)]
        public string _company;
        
        public MzkServiceSchedulingServiceGetZipcodeListRequest() {
        }
        
        public MzkServiceSchedulingServiceGetZipcodeListRequest(string _countryId, string _StateId, string _company) {
            this._countryId = _countryId;
            this._StateId = _StateId;
            this._company = _company;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetZipcodeListResponse", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetZipcodeListResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkZipCodeContract> response;
        
        public MzkServiceSchedulingServiceGetZipcodeListResponse() {
        }
        
        public MzkServiceSchedulingServiceGetZipcodeListResponse(System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkZipCodeContract> response) {
            this.response = response;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetODOReadingDetailsRequest", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetODOReadingDetailsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public string _caseId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=1)]
        public string _company;
        
        public MzkServiceSchedulingServiceGetODOReadingDetailsRequest() {
        }
        
        public MzkServiceSchedulingServiceGetODOReadingDetailsRequest(string _caseId, string _company) {
            this._caseId = _caseId;
            this._company = _company;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetODOReadingDetailsResponse", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetODOReadingDetailsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceDetailsContract> response;
        
        public MzkServiceSchedulingServiceGetODOReadingDetailsResponse() {
        }
        
        public MzkServiceSchedulingServiceGetODOReadingDetailsResponse(System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceDetailsContract> response) {
            this.response = response;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetVendSupplirerNameRequest", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetVendSupplirerNameRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public string _company;
        
        public MzkServiceSchedulingServiceGetVendSupplirerNameRequest() {
        }
        
        public MzkServiceSchedulingServiceGetVendSupplirerNameRequest(string _company) {
            this._company = _company;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetVendSupplirerNameResponse", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetVendSupplirerNameResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkVendorAccountContract> response;
        
        public MzkServiceSchedulingServiceGetVendSupplirerNameResponse() {
        }
        
        public MzkServiceSchedulingServiceGetVendSupplirerNameResponse(System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkVendorAccountContract> response) {
            this.response = response;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetVendorAddressRequest", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetVendorAddressRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public string _vendAccount;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=1)]
        public long _caseRecID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=2)]
        public long _caseServiceRecId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=3)]
        public string _company;
        
        public MzkServiceSchedulingServiceGetVendorAddressRequest() {
        }
        
        public MzkServiceSchedulingServiceGetVendorAddressRequest(string _vendAccount, long _caseRecID, long _caseServiceRecId, string _company) {
            this._vendAccount = _vendAccount;
            this._caseRecID = _caseRecID;
            this._caseServiceRecId = _caseServiceRecId;
            this._company = _company;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetVendorAddressResponse", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetVendorAddressResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public string response;
        
        public MzkServiceSchedulingServiceGetVendorAddressResponse() {
        }
        
        public MzkServiceSchedulingServiceGetVendorAddressResponse(string response) {
            this.response = response;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetTasks_ModifiedRequest", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetTasks_ModifiedRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public string _userID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=1)]
        public string _company;
        
        public MzkServiceSchedulingServiceGetTasks_ModifiedRequest() {
        }
        
        public MzkServiceSchedulingServiceGetTasks_ModifiedRequest(string _userID, string _company) {
            this._userID = _userID;
            this._company = _company;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetTasks_ModifiedResponse", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetTasks_ModifiedResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchdTasksContract> response;
        
        public MzkServiceSchedulingServiceGetTasks_ModifiedResponse() {
        }
        
        public MzkServiceSchedulingServiceGetTasks_ModifiedResponse(System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchdTasksContract> response) {
            this.response = response;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetServiceDetailsRequest", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetServiceDetailsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public string _caseId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=1)]
        public long _caseServiceRecId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=2)]
        public string _company;
        
        public MzkServiceSchedulingServiceGetServiceDetailsRequest() {
        }
        
        public MzkServiceSchedulingServiceGetServiceDetailsRequest(string _caseId, long _caseServiceRecId, string _company) {
            this._caseId = _caseId;
            this._caseServiceRecId = _caseServiceRecId;
            this._company = _company;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetServiceDetailsResponse", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetServiceDetailsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceDetailsContract> response;
        
        public MzkServiceSchedulingServiceGetServiceDetailsResponse() {
        }
        
        public MzkServiceSchedulingServiceGetServiceDetailsResponse(System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceDetailsContract> response) {
            this.response = response;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetLocationTypeRequest", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetLocationTypeRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public long _serviceRecId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=1)]
        public string _company;
        
        public MzkServiceSchedulingServiceGetLocationTypeRequest() {
        }
        
        public MzkServiceSchedulingServiceGetLocationTypeRequest(long _serviceRecId, string _company) {
            this._serviceRecId = _serviceRecId;
            this._company = _company;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetLocationTypeResponse", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetLocationTypeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkLocationTypeContract> response;
        
        public MzkServiceSchedulingServiceGetLocationTypeResponse() {
        }
        
        public MzkServiceSchedulingServiceGetLocationTypeResponse(System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkLocationTypeContract> response) {
            this.response = response;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetProvinceListRequest", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetProvinceListRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public string _countryId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=1)]
        public string _company;
        
        public MzkServiceSchedulingServiceGetProvinceListRequest() {
        }
        
        public MzkServiceSchedulingServiceGetProvinceListRequest(string _countryId, string _company) {
            this._countryId = _countryId;
            this._company = _company;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetProvinceListResponse", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetProvinceListResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkProvinceContract> response;
        
        public MzkServiceSchedulingServiceGetProvinceListResponse() {
        }
        
        public MzkServiceSchedulingServiceGetProvinceListResponse(System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkProvinceContract> response) {
            this.response = response;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceInsertServiceDetailsRequest", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceInsertServiceDetailsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public string _caseId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=1)]
        public long _caseServiceRecId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=2)]
        public long _entityRecId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=3)]
        public Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceDetailsContract contract;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=4)]
        public string _company;
        
        public MzkServiceSchedulingServiceInsertServiceDetailsRequest() {
        }
        
        public MzkServiceSchedulingServiceInsertServiceDetailsRequest(string _caseId, long _caseServiceRecId, long _entityRecId, Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceDetailsContract contract, string _company) {
            this._caseId = _caseId;
            this._caseServiceRecId = _caseServiceRecId;
            this._entityRecId = _entityRecId;
            this.contract = contract;
            this._company = _company;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceInsertServiceDetailsResponse", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceInsertServiceDetailsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public bool response;
        
        public MzkServiceSchedulingServiceInsertServiceDetailsResponse() {
        }
        
        public MzkServiceSchedulingServiceInsertServiceDetailsResponse(bool response) {
            this.response = response;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetCountryRegionListRequest", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetCountryRegionListRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public string _company;
        
        public MzkServiceSchedulingServiceGetCountryRegionListRequest() {
        }
        
        public MzkServiceSchedulingServiceGetCountryRegionListRequest(string _company) {
            this._company = _company;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceGetCountryRegionListResponse", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceGetCountryRegionListResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkCountryRegionContract> response;
        
        public MzkServiceSchedulingServiceGetCountryRegionListResponse() {
        }
        
        public MzkServiceSchedulingServiceGetCountryRegionListResponse(System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkCountryRegionContract> response) {
            this.response = response;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceInsertOtherAddressRequest", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceInsertOtherAddressRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public long _caseRecID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=1)]
        public long _caseServiceRecId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=2)]
        public Eqstra.ServiceScheduling.UILogic.SSProxy.MzkAddressContract _contract;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=3)]
        public string _company;
        
        public MzkServiceSchedulingServiceInsertOtherAddressRequest() {
        }
        
        public MzkServiceSchedulingServiceInsertOtherAddressRequest(long _caseRecID, long _caseServiceRecId, Eqstra.ServiceScheduling.UILogic.SSProxy.MzkAddressContract _contract, string _company) {
            this._caseRecID = _caseRecID;
            this._caseServiceRecId = _caseServiceRecId;
            this._contract = _contract;
            this._company = _company;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MzkServiceSchedulingServiceInsertOtherAddressResponse", WrapperNamespace="http://tempuri.org", IsWrapped=true)]
    public partial class MzkServiceSchedulingServiceInsertOtherAddressResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org", Order=0)]
        public bool response;
        
        public MzkServiceSchedulingServiceInsertOtherAddressResponse() {
        }
        
        public MzkServiceSchedulingServiceInsertOtherAddressResponse(bool response) {
            this.response = response;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface MzkServiceSchedulingServiceChannel : Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MzkServiceSchedulingServiceClient : System.ServiceModel.ClientBase<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService>, Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MzkServiceSchedulingServiceClient() : 
                base(MzkServiceSchedulingServiceClient.GetDefaultBinding(), MzkServiceSchedulingServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_MzkServiceSchedulingService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MzkServiceSchedulingServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(MzkServiceSchedulingServiceClient.GetBindingForEndpoint(endpointConfiguration), MzkServiceSchedulingServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MzkServiceSchedulingServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MzkServiceSchedulingServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MzkServiceSchedulingServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MzkServiceSchedulingServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MzkServiceSchedulingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetCityListResponse> Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService.getCityListAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetCityListRequest request) {
            return base.Channel.getCityListAsync(request);
        }
        
        public System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetCityListResponse> getCityListAsync(string _CountryId, string _StateId, string _company) {
            Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetCityListRequest inValue = new Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetCityListRequest();
            inValue._CountryId = _CountryId;
            inValue._StateId = _StateId;
            inValue._company = _company;
            return ((Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService)(this)).getCityListAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetVendorsResponse> Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService.getVendorsAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetVendorsRequest request) {
            return base.Channel.getVendorsAsync(request);
        }
        
        public System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetVendorsResponse> getVendorsAsync(string _company) {
            Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetVendorsRequest inValue = new Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetVendorsRequest();
            inValue._company = _company;
            return ((Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService)(this)).getVendorsAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetDriversResponse> Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService.getDriversAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetDriversRequest request) {
            return base.Channel.getDriversAsync(request);
        }
        
        public System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetDriversResponse> getDriversAsync(string _company) {
            Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetDriversRequest inValue = new Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetDriversRequest();
            inValue._company = _company;
            return ((Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService)(this)).getDriversAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetCustomersResponse> Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService.getCustomersAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetCustomersRequest request) {
            return base.Channel.getCustomersAsync(request);
        }
        
        public System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetCustomersResponse> getCustomersAsync(string _company) {
            Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetCustomersRequest inValue = new Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetCustomersRequest();
            inValue._company = _company;
            return ((Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService)(this)).getCustomersAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetDriverAddressResponse> Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService.getDriverAddressAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetDriverAddressRequest request) {
            return base.Channel.getDriverAddressAsync(request);
        }
        
        public System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetDriverAddressResponse> getDriverAddressAsync(long _driverTableRecId, long _caseServiceRecId, string _company) {
            Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetDriverAddressRequest inValue = new Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetDriverAddressRequest();
            inValue._driverTableRecId = _driverTableRecId;
            inValue._caseServiceRecId = _caseServiceRecId;
            inValue._company = _company;
            return ((Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService)(this)).getDriverAddressAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetCustomerAddressResponse> Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService.getCustomerAddressAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetCustomerAddressRequest request) {
            return base.Channel.getCustomerAddressAsync(request);
        }
        
        public System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetCustomerAddressResponse> getCustomerAddressAsync(long _custTableRecId, long _caseServiceRecId, string _company) {
            Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetCustomerAddressRequest inValue = new Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetCustomerAddressRequest();
            inValue._custTableRecId = _custTableRecId;
            inValue._caseServiceRecId = _caseServiceRecId;
            inValue._company = _company;
            return ((Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService)(this)).getCustomerAddressAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetTasksOptimizeResponse> Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService.getTasksOptimizeAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetTasksOptimizeRequest request) {
            return base.Channel.getTasksOptimizeAsync(request);
        }
        
        public System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetTasksOptimizeResponse> getTasksOptimizeAsync(string _userID, string _company) {
            Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetTasksOptimizeRequest inValue = new Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetTasksOptimizeRequest();
            inValue._userID = _userID;
            inValue._company = _company;
            return ((Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService)(this)).getTasksOptimizeAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetTasksResponse> Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService.getTasksAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetTasksRequest request) {
            return base.Channel.getTasksAsync(request);
        }
        
        public System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetTasksResponse> getTasksAsync(string _userID, string _company) {
            Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetTasksRequest inValue = new Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetTasksRequest();
            inValue._userID = _userID;
            inValue._company = _company;
            return ((Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService)(this)).getTasksAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetServiceTypesResponse> Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService.getServiceTypesAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetServiceTypesRequest request) {
            return base.Channel.getServiceTypesAsync(request);
        }
        
        public System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetServiceTypesResponse> getServiceTypesAsync(string _caseId, string _company) {
            Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetServiceTypesRequest inValue = new Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetServiceTypesRequest();
            inValue._caseId = _caseId;
            inValue._company = _company;
            return ((Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService)(this)).getServiceTypesAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetSuburbListResponse> Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService.getSuburbListAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetSuburbListRequest request) {
            return base.Channel.getSuburbListAsync(request);
        }
        
        public System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetSuburbListResponse> getSuburbListAsync(string _CountryId, string _StateId, string _company) {
            Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetSuburbListRequest inValue = new Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetSuburbListRequest();
            inValue._CountryId = _CountryId;
            inValue._StateId = _StateId;
            inValue._company = _company;
            return ((Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService)(this)).getSuburbListAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceUpdateConfirmationDatesResponse> Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService.updateConfirmationDatesAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceUpdateConfirmationDatesRequest request) {
            return base.Channel.updateConfirmationDatesAsync(request);
        }
        
        public System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceUpdateConfirmationDatesResponse> updateConfirmationDatesAsync(long _caseServiceRecId, Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceDetailsContract contract, string _company) {
            Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceUpdateConfirmationDatesRequest inValue = new Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceUpdateConfirmationDatesRequest();
            inValue._caseServiceRecId = _caseServiceRecId;
            inValue.contract = contract;
            inValue._company = _company;
            return ((Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService)(this)).updateConfirmationDatesAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceUpdateStatusListResponse> Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService.updateStatusListAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceUpdateStatusListRequest request) {
            return base.Channel.updateStatusListAsync(request);
        }
        
        public System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceUpdateStatusListResponse> updateStatusListAsync(System.Collections.ObjectModel.ObservableCollection<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchdTasksContract> _lstTasks, string _company) {
            Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceUpdateStatusListRequest inValue = new Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceUpdateStatusListRequest();
            inValue._lstTasks = _lstTasks;
            inValue._company = _company;
            return ((Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService)(this)).updateStatusListAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceValidateUserResponse> Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService.validateUserAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceValidateUserRequest request) {
            return base.Channel.validateUserAsync(request);
        }
        
        public System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceValidateUserResponse> validateUserAsync(string _userID, string _password) {
            Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceValidateUserRequest inValue = new Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceValidateUserRequest();
            inValue._userID = _userID;
            inValue._password = _password;
            return ((Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService)(this)).validateUserAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetZipcodeListResponse> Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService.getZipcodeListAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetZipcodeListRequest request) {
            return base.Channel.getZipcodeListAsync(request);
        }
        
        public System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetZipcodeListResponse> getZipcodeListAsync(string _countryId, string _StateId, string _company) {
            Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetZipcodeListRequest inValue = new Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetZipcodeListRequest();
            inValue._countryId = _countryId;
            inValue._StateId = _StateId;
            inValue._company = _company;
            return ((Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService)(this)).getZipcodeListAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetODOReadingDetailsResponse> Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService.getODOReadingDetailsAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetODOReadingDetailsRequest request) {
            return base.Channel.getODOReadingDetailsAsync(request);
        }
        
        public System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetODOReadingDetailsResponse> getODOReadingDetailsAsync(string _caseId, string _company) {
            Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetODOReadingDetailsRequest inValue = new Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetODOReadingDetailsRequest();
            inValue._caseId = _caseId;
            inValue._company = _company;
            return ((Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService)(this)).getODOReadingDetailsAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetVendSupplirerNameResponse> Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService.getVendSupplirerNameAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetVendSupplirerNameRequest request) {
            return base.Channel.getVendSupplirerNameAsync(request);
        }
        
        public System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetVendSupplirerNameResponse> getVendSupplirerNameAsync(string _company) {
            Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetVendSupplirerNameRequest inValue = new Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetVendSupplirerNameRequest();
            inValue._company = _company;
            return ((Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService)(this)).getVendSupplirerNameAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetVendorAddressResponse> Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService.getVendorAddressAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetVendorAddressRequest request) {
            return base.Channel.getVendorAddressAsync(request);
        }
        
        public System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetVendorAddressResponse> getVendorAddressAsync(string _vendAccount, long _caseRecID, long _caseServiceRecId, string _company) {
            Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetVendorAddressRequest inValue = new Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetVendorAddressRequest();
            inValue._vendAccount = _vendAccount;
            inValue._caseRecID = _caseRecID;
            inValue._caseServiceRecId = _caseServiceRecId;
            inValue._company = _company;
            return ((Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService)(this)).getVendorAddressAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetTasks_ModifiedResponse> Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService.getTasks_ModifiedAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetTasks_ModifiedRequest request) {
            return base.Channel.getTasks_ModifiedAsync(request);
        }
        
        public System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetTasks_ModifiedResponse> getTasks_ModifiedAsync(string _userID, string _company) {
            Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetTasks_ModifiedRequest inValue = new Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetTasks_ModifiedRequest();
            inValue._userID = _userID;
            inValue._company = _company;
            return ((Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService)(this)).getTasks_ModifiedAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetServiceDetailsResponse> Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService.getServiceDetailsAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetServiceDetailsRequest request) {
            return base.Channel.getServiceDetailsAsync(request);
        }
        
        public System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetServiceDetailsResponse> getServiceDetailsAsync(string _caseId, long _caseServiceRecId, string _company) {
            Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetServiceDetailsRequest inValue = new Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetServiceDetailsRequest();
            inValue._caseId = _caseId;
            inValue._caseServiceRecId = _caseServiceRecId;
            inValue._company = _company;
            return ((Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService)(this)).getServiceDetailsAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetLocationTypeResponse> Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService.getLocationTypeAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetLocationTypeRequest request) {
            return base.Channel.getLocationTypeAsync(request);
        }
        
        public System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetLocationTypeResponse> getLocationTypeAsync(long _serviceRecId, string _company) {
            Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetLocationTypeRequest inValue = new Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetLocationTypeRequest();
            inValue._serviceRecId = _serviceRecId;
            inValue._company = _company;
            return ((Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService)(this)).getLocationTypeAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetProvinceListResponse> Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService.getProvinceListAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetProvinceListRequest request) {
            return base.Channel.getProvinceListAsync(request);
        }
        
        public System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetProvinceListResponse> getProvinceListAsync(string _countryId, string _company) {
            Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetProvinceListRequest inValue = new Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetProvinceListRequest();
            inValue._countryId = _countryId;
            inValue._company = _company;
            return ((Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService)(this)).getProvinceListAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceInsertServiceDetailsResponse> Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService.insertServiceDetailsAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceInsertServiceDetailsRequest request) {
            return base.Channel.insertServiceDetailsAsync(request);
        }
        
        public System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceInsertServiceDetailsResponse> insertServiceDetailsAsync(string _caseId, long _caseServiceRecId, long _entityRecId, Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceDetailsContract contract, string _company) {
            Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceInsertServiceDetailsRequest inValue = new Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceInsertServiceDetailsRequest();
            inValue._caseId = _caseId;
            inValue._caseServiceRecId = _caseServiceRecId;
            inValue._entityRecId = _entityRecId;
            inValue.contract = contract;
            inValue._company = _company;
            return ((Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService)(this)).insertServiceDetailsAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetCountryRegionListResponse> Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService.getCountryRegionListAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetCountryRegionListRequest request) {
            return base.Channel.getCountryRegionListAsync(request);
        }
        
        public System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetCountryRegionListResponse> getCountryRegionListAsync(string _company) {
            Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetCountryRegionListRequest inValue = new Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceGetCountryRegionListRequest();
            inValue._company = _company;
            return ((Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService)(this)).getCountryRegionListAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceInsertOtherAddressResponse> Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService.insertOtherAddressAsync(Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceInsertOtherAddressRequest request) {
            return base.Channel.insertOtherAddressAsync(request);
        }
        
        public System.Threading.Tasks.Task<Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceInsertOtherAddressResponse> insertOtherAddressAsync(long _caseRecID, long _caseServiceRecId, Eqstra.ServiceScheduling.UILogic.SSProxy.MzkAddressContract _contract, string _company) {
            Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceInsertOtherAddressRequest inValue = new Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingServiceInsertOtherAddressRequest();
            inValue._caseRecID = _caseRecID;
            inValue._caseServiceRecId = _caseServiceRecId;
            inValue._contract = _contract;
            inValue._company = _company;
            return ((Eqstra.ServiceScheduling.UILogic.SSProxy.MzkServiceSchedulingService)(this)).insertOtherAddressAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_MzkServiceSchedulingService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.TransportCredentialOnly;
                result.Security.Transport.ClientCredentialType = System.ServiceModel.HttpClientCredentialType.Windows;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_MzkServiceSchedulingService)) {
                return new System.ServiceModel.EndpointAddress("http://srfmlbispstg01.lfmd.co.za/MicrosoftDynamicsAXAif60/ServiceSchedulingServic" +
                        "e/xppservice.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return MzkServiceSchedulingServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_MzkServiceSchedulingService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return MzkServiceSchedulingServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_MzkServiceSchedulingService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_MzkServiceSchedulingService,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://schemas.microsoft.com/netfx/2009/05/routing", ConfigurationName="SSProxy.IRequestReplyRouter")]
    public interface IRequestReplyRouter {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRequestReplyRouterChannel : Eqstra.ServiceScheduling.UILogic.SSProxy.IRequestReplyRouter, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RequestReplyRouterClient : System.ServiceModel.ClientBase<Eqstra.ServiceScheduling.UILogic.SSProxy.IRequestReplyRouter>, Eqstra.ServiceScheduling.UILogic.SSProxy.IRequestReplyRouter {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public RequestReplyRouterClient() : 
                base(RequestReplyRouterClient.GetDefaultBinding(), RequestReplyRouterClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.reqReplyEndpoint.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RequestReplyRouterClient(EndpointConfiguration endpointConfiguration) : 
                base(RequestReplyRouterClient.GetBindingForEndpoint(endpointConfiguration), RequestReplyRouterClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RequestReplyRouterClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(RequestReplyRouterClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RequestReplyRouterClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(RequestReplyRouterClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RequestReplyRouterClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.reqReplyEndpoint)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.TransportCredentialOnly;
                result.Security.Transport.ClientCredentialType = System.ServiceModel.HttpClientCredentialType.Windows;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.reqReplyEndpoint)) {
                return new System.ServiceModel.EndpointAddress("http://srfmlbispstg01.lfmd.co.za/MicrosoftDynamicsAXAif60/ServiceSchedulingServic" +
                        "e/xppservice.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return RequestReplyRouterClient.GetBindingForEndpoint(EndpointConfiguration.reqReplyEndpoint);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return RequestReplyRouterClient.GetEndpointAddress(EndpointConfiguration.reqReplyEndpoint);
        }
        
        public enum EndpointConfiguration {
            
            reqReplyEndpoint,
        }
    }
}
